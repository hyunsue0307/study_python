<<<<<<< HEAD
from typing import Any, overload, TypeVar
=======
from typing import Any, TypeVar, overload
>>>>>>> 0a20124 (readme 수정)

import numpy as np
from numpy import floating, object_
from numpy._typing import (
    NDArray,
<<<<<<< HEAD
    _FloatLike_co,
    _ArrayLikeFloat_co,
    _ArrayLikeObject_co,
=======
    _ArrayLikeFloat_co,
    _ArrayLikeObject_co,
    _FloatLike_co,
>>>>>>> 0a20124 (readme 수정)
)

__all__ = ["fix", "isneginf", "isposinf"]

<<<<<<< HEAD
_ArrayType = TypeVar("_ArrayType", bound=NDArray[Any])
=======
_ArrayT = TypeVar("_ArrayT", bound=NDArray[Any])
>>>>>>> 0a20124 (readme 수정)

@overload
def fix(  # type: ignore[misc]
    x: _FloatLike_co,
    out: None = ...,
<<<<<<< HEAD
) -> floating[Any]: ...
=======
) -> floating: ...
>>>>>>> 0a20124 (readme 수정)
@overload
def fix(
    x: _ArrayLikeFloat_co,
    out: None = ...,
<<<<<<< HEAD
) -> NDArray[floating[Any]]: ...
=======
) -> NDArray[floating]: ...
>>>>>>> 0a20124 (readme 수정)
@overload
def fix(
    x: _ArrayLikeObject_co,
    out: None = ...,
) -> NDArray[object_]: ...
@overload
def fix(
    x: _ArrayLikeFloat_co | _ArrayLikeObject_co,
<<<<<<< HEAD
    out: _ArrayType,
) -> _ArrayType: ...
=======
    out: _ArrayT,
) -> _ArrayT: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def isposinf(  # type: ignore[misc]
    x: _FloatLike_co,
    out: None = ...,
) -> np.bool: ...
@overload
def isposinf(
    x: _ArrayLikeFloat_co,
    out: None = ...,
) -> NDArray[np.bool]: ...
@overload
def isposinf(
    x: _ArrayLikeFloat_co,
<<<<<<< HEAD
    out: _ArrayType,
) -> _ArrayType: ...
=======
    out: _ArrayT,
) -> _ArrayT: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def isneginf(  # type: ignore[misc]
    x: _FloatLike_co,
    out: None = ...,
) -> np.bool: ...
@overload
def isneginf(
    x: _ArrayLikeFloat_co,
    out: None = ...,
) -> NDArray[np.bool]: ...
@overload
def isneginf(
    x: _ArrayLikeFloat_co,
<<<<<<< HEAD
    out: _ArrayType,
) -> _ArrayType: ...
=======
    out: _ArrayT,
) -> _ArrayT: ...
>>>>>>> 0a20124 (readme 수정)
