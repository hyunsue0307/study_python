<<<<<<< HEAD
from typing import overload, Any

from numpy import complexfloating

from numpy._typing import (
    NDArray,
    _ArrayLikeFloat_co,
    _ArrayLikeComplex_co,
=======
from typing import Any, overload

from numpy import complexfloating
from numpy._typing import (
    NDArray,
    _ArrayLikeComplex_co,
    _ArrayLikeFloat_co,
>>>>>>> 0a20124 (readme 수정)
    _ComplexLike_co,
    _FloatLike_co,
)

__all__ = ["sqrt", "log", "log2", "logn", "log10", "power", "arccos", "arcsin", "arctanh"]

@overload
def sqrt(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def sqrt(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def sqrt(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def sqrt(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def sqrt(x: _ComplexLike_co) -> complexfloating: ...
@overload
def sqrt(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def sqrt(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def log(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def log(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def log(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def log(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def log(x: _ComplexLike_co) -> complexfloating: ...
@overload
def log(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def log(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def log10(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def log10(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def log10(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def log10(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def log10(x: _ComplexLike_co) -> complexfloating: ...
@overload
def log10(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def log10(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def log2(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def log2(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def log2(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def log2(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def log2(x: _ComplexLike_co) -> complexfloating: ...
@overload
def log2(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def log2(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def logn(n: _FloatLike_co, x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def logn(n: _ComplexLike_co, x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def logn(n: _ArrayLikeFloat_co, x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def logn(n: _ArrayLikeComplex_co, x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def logn(n: _ComplexLike_co, x: _ComplexLike_co) -> complexfloating: ...
@overload
def logn(n: _ArrayLikeFloat_co, x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def logn(n: _ArrayLikeComplex_co, x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def power(x: _FloatLike_co, p: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def power(x: _ComplexLike_co, p: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def power(x: _ArrayLikeFloat_co, p: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def power(x: _ArrayLikeComplex_co, p: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def power(x: _ComplexLike_co, p: _ComplexLike_co) -> complexfloating: ...
@overload
def power(x: _ArrayLikeFloat_co, p: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def power(x: _ArrayLikeComplex_co, p: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def arccos(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def arccos(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def arccos(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def arccos(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def arccos(x: _ComplexLike_co) -> complexfloating: ...
@overload
def arccos(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def arccos(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def arcsin(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def arcsin(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def arcsin(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def arcsin(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def arcsin(x: _ComplexLike_co) -> complexfloating: ...
@overload
def arcsin(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def arcsin(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)

@overload
def arctanh(x: _FloatLike_co) -> Any: ...
@overload
<<<<<<< HEAD
def arctanh(x: _ComplexLike_co) -> complexfloating[Any, Any]: ...
@overload
def arctanh(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def arctanh(x: _ArrayLikeComplex_co) -> NDArray[complexfloating[Any, Any]]: ...
=======
def arctanh(x: _ComplexLike_co) -> complexfloating: ...
@overload
def arctanh(x: _ArrayLikeFloat_co) -> NDArray[Any]: ...
@overload
def arctanh(x: _ArrayLikeComplex_co) -> NDArray[complexfloating]: ...
>>>>>>> 0a20124 (readme 수정)
